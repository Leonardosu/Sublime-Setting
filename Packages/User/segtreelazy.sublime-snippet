<snippet>
    <content><![CDATA[
struct segtree {
    using T = long long int;
    struct node {
        T val;
        node(T val=0) : val(val){}
    };

    int n;
    vector<node> tree;
    vector<T> lazy;
    segtree(int n) : n(n), tree(4*n), lazy(4*n) {}

    void push(int no, int l, int r) {
        T &x = lazy[no];
        if(x) {
            tree[no].val ^= x;
            if(l!=r) lazy[2*no] ^= x, lazy[2*no+1] ^= x;
            x = 0;
        }
    }

    void update(int no, int ini, int fim, int l, int r, T val) {
        push(no, ini, fim);
        if(r < ini || fim < l) return;

        if(l<=ini && fim<=r) {
            lazy[no] ^= val;
            push(no, ini, fim);         
        } else {
            int mid = (ini+fim)>>1;
            int w = no<<1;
            update(w, ini, mid, l, r, val);
            update(w+1, mid+1, fim, l, r, val);

            tree[no].val = (tree[w].val ^ tree[w+1].val);
        }
    }

    T query(int no, int ini, int fim, int l, int r) {
        push(no, ini, fim);

        if(r < ini || fim < l) return 0;
        if(l<=ini && fim<=r) return tree[no].val;
        int mid = (ini+fim)>>1;
        return (query(2*no, ini, mid, l, r) ^
                query(2*no+1, mid+1, fim, l, r));
    }    

    void update(int l, int r, T val) {update(1, 0, n-1, l, r, val);}
    T query(int l, int r) {return query(1, 0, n-1, l, r);}
};
]]></content>
  <tabTrigger>zsegtreelazy</tabTrigger>
  <source>source.cpp</source>
</snippet>